name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 1
    steps:
    - uses: actions/checkout@v4

    - uses: dtolnay/rust-toolchain@stable
    - name: Install protoc
      run: |
        sudo apt-get update -y
        sudo apt-get install -y protobuf-compiler libprotobuf-dev clang-format

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code
      run: cargo check

    - name: Check code with Clippy
      run: |
        rustup component add clippy
        cargo clippy -- -D warnings

    - name: Lint protobuf
      run: clang-format --dry-run --Werror proto/*.proto

  small-test:
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 1
    steps:
    - uses: actions/checkout@v4

    - uses: dtolnay/rust-toolchain@stable

    - name: Install protoc
      run: |
        sudo apt-get update -y
        sudo apt-get install -y protobuf-compiler libprotobuf-dev

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Running small tests
      run: cargo test --all-features --bins --lib

  midium-test:
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 1
    steps:
    - uses: actions/checkout@v4

    - uses: dtolnay/rust-toolchain@stable

    - name: Install protoc
      run: |
        sudo apt-get update -y
        sudo apt-get install -y protobuf-compiler libprotobuf-dev

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-with-sqlx-${{ hashFiles('**/Cargo.lock') }}

    - uses: docker/setup-buildx-action@v2

    - uses: docker/build-push-action@v4
      with:
        load: true
        context: .
        file: shortcut-api/Dockerfile
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Pull images
      run: docker compose pull

    - name: Build
      run: docker compose build

    - id: compose-up
      name: Run API and DB
      run: |
        docker compose up -d


    - name: DB migration
      run: |
        which sqlx || cargo install sqlx-cli --no-default-features --features rustls,mysql --no-track
        cargo sqlx migrate run
      env:
        DATABASE_URL: mysql://shortcut:password@localhost:3306/shortcut

    - name: Run medium tests
      run: cargo test --tests
      env:
        MYSQL_DATABASE: shortcut
        MYSQL_USER: shortcut
        MYSQL_PASSWORD: password
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306

    - name: dump logs
      if: failure()
      run: |
        mkdir logs
        docker compose logs > \
          logs/docker-compose-${{ github.workflow }}-${{ github.run_id }}-${{ github.run_number }}.log

    - name: upload docker compose logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: docker-compose-${{ github.workflow }}-${{ github.run_id }}-${{ github.run_number }}.log
        path: logs/docker-compose-${{ github.workflow }}-${{ github.run_id }}-${{ github.run_number }}.log

