# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  shortcut-api:
    build:
      context: shortcut-api
      target: final
    ports:
      - 1192:1192


  mysql:
    image: mysql:8
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: shortcut
      MYSQL_USER: shortcut
      MYSQL_PASSWORD: password
      BIND-ADDRESS: 0.0.0.0
    restart: always
    volumes:
      - type: bind
        source: ./db/init
        target: /docker-entrypoint-initdb.d
    ports:
      - 3306:3306

  # Test environment
  api-test:
    build:
      context: shortcut-api
      target: build
    command: cargo test
    volumes:
      - type: bind
        source: "./shortcut-api/src"
        target: "/app/src"
      - type: bind
        source: "./shortcut-api/Cargo.toml"
        target: "/app/Cargo.toml"
    environment:
      MYSQL_DATABASE: shortcut
      MYSQL_USER: shortcut
      MYSQL_PASSWORD: password
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    profiles:
      - test


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

